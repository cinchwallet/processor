package com.cinchwallet.core.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.cinchwallet.acquirer.http.msg.TxnHistory;
import com.cinchwallet.core.Card;
import com.cinchwallet.core.Cardholder;
import com.cinchwallet.core.Merchant;
import com.cinchwallet.core.exception.SwitchException;
import com.cinchwallet.core.utils.DBConnection;
import com.cinchwallet.core.utils.CWLogger;
import com.cinchwallet.core.utils.Utils;

/**
 * The <code>TxnLogDao</code> class maps with the oltp_txn_log table. It
 * implements the <code>RPSDao</code> and override the save method to log the
 * records into database.
 *
 * <p>
 * To log the transaction data into database, save method checks for
 * LEG_1/LEG_2, if it is already created, update query get executed and
 * LEG_1/LEG_2 updated by LEG_4/LEG_3 respectively. Otherwise insert operation
 * inserts the LEG_1/LEG_2.
 *
 * <p>
 * In the context, acquirerRequest and acquirerResponse is contained in the same
 * object i.e. acquirerIMF. oltpTxnLogId is null in acquirerRequest and not null
 * in the acquirerResponse. Based on the oltpTxnLogId, system decides whether to
 * insert or update the record. If oltpTxnLogId is null, oltpTxnLogId is
 * generated by the system and insertion being done for LEG_1 otherwise records
 * get updated for LEG_4.
 * <p>
 * Same logic goes for processorRequest and processorResponse as well, where
 * oltpTxnLogId is null in case of processorRequest i.e. LEG_2 and not null for
 * processorResponse i.e. LEG_4.
 */
public class TxnLogDao {

    private Long               oltpTxnLogId;
    private String             txnId;
    private String             leg;
    private String             mti;
    private String             pan;
    private String             procCode;
    private Double             txnAmount;
    private String             txnCurrency;
    private String             txnAmountScale;
    private Date               dtTransmission;
    private String             stan;
    private Date               dtTransaction;
    private String             dtEffective;
    private String             dtExpiry;
    private String             dtCapture;
    private String             msgErrIndicator;
    private String             txnLifeCycleId;
    private byte[]             posDataCd;
    private String             functionCode;
    private String             reasonCode;
    private String             merchantCatCode;
    private String             acqInstitutionIdCd;
    private String             rrn;
    private String             approvalCd;
    private String             resultCd;
    private String             tid;
    private String             mid;
    private String             midNameLocation;
    private String             additionalAmount;
    private String             displayMessage;
    private String             upc;
    private String             irc;
    private String             specificationName;
    private String             transactionType;
    private Date               creationTs;
    private Date               updateTs;
    private String             accountInformation;
    private String             oneIncNumber;
    private String             loyaltyNumber;
    private Double             balance;
    private Integer            pointBalance;
    private String            pointExpireOn;
    private String             cardHolderName;
	private Cardholder cardholder;
	private Card card;
	private Integer txnPoints;
	private String newCardNumber;
	private String phoneNumber;

    public static final String INSERT_STR     = "INSERT INTO TXN_LOG( " + "  txn_id, leg, pan, pan_hint, txn_amount," + "  dt_transmission, stan,dt_transaction,approval_cd,reason_cd," + "  result_cd,tid,mid,transaction_type) " + "  VALUES"
	                                              + " (?,?,?,?,?," + " ?,?,?,?,?," + " ?,?,?,?" + ")";

    public static final String SELECT_TXN_STR = "select * from TXN_LOG where txn_amount is not null and pan = ? and result_cd = ? and leg = ?";

    /**
     * Default Constructor
     *
     * Initialise the creationTs with the current date for this RadicalMsg
     * object. It is being done only for AcquirerRequest and ProcessorRequest.
     */
    public TxnLogDao() {
	creationTs = new Date();
    }

    /**
     * Saves the RadicalMsg by inserting or updating the records into
     * oltp_txn_log. To save AcquirerRequest/ProcessorRequest, generates the
     * oltpTxnLog and inserts into database. AcquirerResponse/ProcessorResponse
     * get saved by update operation.
     * <p>
     * Calls the closeAll method of DBConnection class to close the connection.
     * <p>
     * In case of any Database Exception while updating/inserting, records get
     * logged into transactionslog.log
     */
    public void save() {
	PreparedStatement lPreparedStatement = null;
	Connection lConnection = null;
	try {
	    lConnection = DBConnection.getTxnConnection();
	    lPreparedStatement = lConnection.prepareStatement(INSERT_STR);

	    setDBStatementValues(lPreparedStatement);
	    CWLogger.appLog.debug("Executing Trans Log Insert Statement" + INSERT_STR);
	    CWLogger.appLog.debug("Executing Trans Log Insert Statement" + this.toString());
	    if (lPreparedStatement.executeUpdate() <= 0) {
		throw new SwitchException("Unable to insert TXN Log entry ");
	    }
	    DBConnection.closeAll(null, lPreparedStatement, null);
	    lPreparedStatement = null;
	} catch (Exception ex) {
	    CWLogger.appLog.error("Error Inserting Transaction Log Entry " + INSERT_STR + ex.getMessage(), ex);
	    CWLogger.txnLog.info(this.toString());
	} finally {
	    DBConnection.closeAll(null, lPreparedStatement, lConnection);
	}
    }

    /**
     * PreparedStatement for insert/update have already been defined. In this
     * method, different setter methods of PreparedStatement is being called to
     * set the values in PreparedStatement.
     *
     * @param ps - PreparedStatement for insert/update.
     * @throws SQLException
     */
    public void setDBStatementValues(PreparedStatement ps) throws SQLException {
	int index = 1;
	ps.setString(index++, txnId);
	ps.setString(index++, leg);
	ps.setString(index++, pan);
	String panHint = pan.substring(0, pan.length() - 10) + "XXXXXX" + pan.substring(pan.length() - 4);
	ps.setString(index++, panHint);
	if (txnAmount != null) {
	    ps.setDouble(index++, txnAmount);
	} else {
	    ps.setNull(index++, java.sql.Types.NULL);
	}

	if (dtTransmission != null) {
	    ps.setTimestamp(index++, new Timestamp(dtTransmission.getTime()));
	} else {
	    ps.setNull(index++, java.sql.Types.NULL);
	}
	ps.setString(index++, stan);
	if (dtTransaction != null) {
	    ps.setTimestamp(index++, new Timestamp(dtTransaction.getTime()));
	} else {
	    ps.setNull(index++, java.sql.Types.NULL);
	}
	ps.setString(index++, this.approvalCd);
	ps.setString(index++, this.reasonCode);
	ps.setString(index++, this.resultCd);
	ps.setString(index++, this.tid);
	ps.setString(index++, this.mid);
	ps.setString(index++, this.transactionType);
    }

    /**
     * Overridden toString() method, returns the values of all member variable
     * along with their name.
     */
    public String toString() {
	StringBuffer valueBuff = new StringBuffer();
	valueBuff.append("oltpTxnLogId=" + oltpTxnLogId);
	valueBuff.append(",txnId=" + txnId);
	valueBuff.append(",leg=" + leg);
	valueBuff.append(",mti=" + mti);
	valueBuff.append(",pan=" + pan);
	valueBuff.append(",procCode=" + procCode);
	valueBuff.append(",txnAmount=" + txnAmount);
	valueBuff.append(",txnCurrency=" + txnCurrency);
	valueBuff.append(",dtTransmission=" + dtTransmission);
	valueBuff.append(",stan=" + stan);
	valueBuff.append(",dtTransaction=" + dtTransaction);
	valueBuff.append(",dtEffective=" + dtEffective);
	valueBuff.append(",dtExpiry=" + dtExpiry);
	valueBuff.append(",dtCapture=" + dtCapture);
	valueBuff.append(",msgErr_indicator=" + msgErrIndicator);
	valueBuff.append(",txnLife_cycle_id=" + txnLifeCycleId);
	valueBuff.append(",posData_cd=" + posDataCd);
	valueBuff.append(",functionCode=" + functionCode);
	valueBuff.append(",reasonCode=" + reasonCode);
	valueBuff.append(",merchantCat_code=" + merchantCatCode);
	valueBuff.append(",acqInstitution_id_cd=" + acqInstitutionIdCd);
	valueBuff.append(",rrn=" + rrn);
	valueBuff.append(",approvalCd=" + approvalCd);
	valueBuff.append(",resultCd=" + resultCd);
	valueBuff.append(",tid=" + tid);
	valueBuff.append(",mid=" + mid);
	valueBuff.append(",midName_location=" + midNameLocation);
	valueBuff.append(",additionalAmount=" + additionalAmount);
	valueBuff.append(",displayMessage=" + displayMessage);
	valueBuff.append(",upc=" + upc);
	valueBuff.append(",irc=" + irc);
	valueBuff.append(",specificationName=" + specificationName);
	valueBuff.append(",transactionType=" + transactionType);
	return valueBuff.toString();
    }

    /**
     * This method reads the ResultSet and populates the RadicalMsg object.
     *
     * @param rs - ResultSet
     * @throws SQLException
     */
    public void populate(ResultSet rs) throws SQLException {
	if (rs != null) {
	    this.oltpTxnLogId = rs.getLong("oltp_txn_log_id");
	    this.txnId = rs.getString("txn_id");
	    this.leg = rs.getString("leg");
	    this.mti = rs.getString("mti");
	    this.pan = rs.getString("pan");
	    this.procCode = rs.getString("proc_code");
	    this.txnAmount = rs.getDouble("txn_amount");
	    this.txnCurrency = rs.getString("txn_currency");
	    this.txnAmountScale = rs.getString("txn_amount_scale");
	    this.dtTransmission = rs.getTimestamp("dt_transmission");
	    this.stan = rs.getString("stan");
	    this.dtTransaction = rs.getTimestamp("dt_transaction");
	    this.dtEffective = rs.getString("dt_effective");
	    this.dtExpiry = rs.getString("dt_expiry");
	    this.dtCapture = rs.getString("dt_capture");
	    this.msgErrIndicator = rs.getString("msg_err_indicator");
	    this.txnLifeCycleId = rs.getString("txn_life_cycle_id");
	    // this.posDataCd = rs.getString("pos_data_cd").getBytes();
	    this.functionCode = rs.getString("function_code");
	    this.reasonCode = rs.getString("reason_code");
	    this.merchantCatCode = rs.getString("merchant_cat_code");
	    this.acqInstitutionIdCd = rs.getString("acq_institution_id_cd");
	    this.rrn = rs.getString("rrn");
	    this.approvalCd = rs.getString("approval_cd");
	    this.resultCd = rs.getString("result_cd");
	    this.tid = rs.getString("tid");
	    this.mid = rs.getString("mid");
	    this.midNameLocation = rs.getString("mid_name_location");
	    this.additionalAmount = rs.getString("additional_amount");
	    this.displayMessage = rs.getString("display_message");
	    this.upc = rs.getString("upc");
	    this.irc = rs.getString("irc");
	    this.specificationName = rs.getString("spec_name");
	    this.transactionType = rs.getString("transaction_type");
	    this.creationTs = rs.getTimestamp("creation_ts");
	    this.updateTs = rs.getTimestamp("update_ts");
	}

    }

    public Long getOltpTxnLogId() {
	return oltpTxnLogId;
    }

    public void setOltpTxnLogId(Long oltpTxnLogId) {
	this.oltpTxnLogId = oltpTxnLogId;
    }

    public String getTxnId() {
	return txnId;
    }

    public void setTxnId(String txnId) {
	this.txnId = txnId;
    }

    public String getLeg() {
	return leg;
    }

    public void setLeg(String leg) {
	this.leg = leg;
    }

    public String getMti() {
	return mti;
    }

    public void setMti(String mti) {
	this.mti = mti;
    }

    public String getPan() {
	return pan;
    }

    public void setPan(String pan) {
	this.pan = pan;
    }

    public String getProcCcode() {
	return procCode;
    }

    public void setProcCcode(String procCcode) {
	this.procCode = procCcode;
    }

    public Double getTxnAmount() {
	return txnAmount;
    }

    public void setTxnAmount(Double txnAmount) {
	this.txnAmount = txnAmount;
    }

    public String getTxnCurrency() {
	return txnCurrency;
    }

    public void setTxnCurrency(String txnCurrency) {
	this.txnCurrency = txnCurrency;
    }

    public Date getDtTransmission() {
	return dtTransmission;
    }

    public void setDtTransmission(Date dtTransmission) {
	this.dtTransmission = dtTransmission;
    }

    public String getStan() {
	return stan;
    }

    public void setStan(String stan) {
	this.stan = stan;
    }

    public Date getDtTransaction() {
	return dtTransaction;
    }

    public void setDtTransaction(Date dtTransaction) {
	this.dtTransaction = dtTransaction;
    }

    public String getDtEffective() {
	return dtEffective;
    }

    public void setDtEffective(String dtEffective) {
	this.dtEffective = dtEffective;
    }

    public String getDtExpiry() {
	return dtExpiry;
    }

    public void setDtExpiry(String dtExpiry) {
	this.dtExpiry = dtExpiry;
    }

    public String getDtCapture() {
	return dtCapture;
    }

    public void setDtCapture(String dtCapture) {
	this.dtCapture = dtCapture;
    }

    public String getMsgEerrIndicator() {
	return msgErrIndicator;
    }

    public void setMsgEerrIndicator(String msgEerrIndicator) {
	this.msgErrIndicator = msgEerrIndicator;
    }

    public String getTxnLifeCycleId() {
	return txnLifeCycleId;
    }

    public void setTxnLifeCycleId(String txnLifeCycleId) {
	this.txnLifeCycleId = txnLifeCycleId;
    }

    public byte[] getPosDataCd() {
	return posDataCd;
    }

    public void setPosDataCd(byte[] posDataCd) {
	this.posDataCd = posDataCd;
    }

    public String getFunctionCode() {
	return functionCode;
    }

    public void setFunctionCode(String functionCode) {
	this.functionCode = functionCode;
    }

    public String getReasonCode() {
	return reasonCode;
    }

    public void setReasonCode(String reasonCode) {
	this.reasonCode = reasonCode;
    }

    public String getMerchantCatCode() {
	return merchantCatCode;
    }

    public void setMerchantCatCode(String merchantCatCode) {
	this.merchantCatCode = merchantCatCode;
    }

    public String getAcqInstitutionIdCd() {
	return acqInstitutionIdCd;
    }

    public void setAcqInstitutionIdCd(String acqInstitutionIdCd) {
	this.acqInstitutionIdCd = acqInstitutionIdCd;
    }

    public String getRrn() {
	return rrn;
    }

    public void setRrn(String rrn) {
	this.rrn = rrn;
    }

    public String getApprovalCd() {
	return approvalCd;
    }

    public void setApprovalCd(String approvalCd) {
	this.approvalCd = approvalCd;
    }

    public String getResultCd() {
	return resultCd;
    }

    public void setResultCd(String resultCd) {
	this.resultCd = resultCd;
    }

    public String getTid() {
	return tid;
    }

    public void setTid(String tid) {
	this.tid = tid;
    }

    public String getMid() {
	return mid;
    }

    public void setMid(String mid) {
	this.mid = mid;
    }

    public String getMidNameLocation() {
	return midNameLocation;
    }

    public void setMidNameLocation(String midNameLocation) {
	this.midNameLocation = midNameLocation;
    }

    public String getAdditionalAmount() {
	return additionalAmount;
    }

    public void setAdditionalAmount(String additionalAmount) {
	this.additionalAmount = additionalAmount;
    }

    public String getDisplayMessage() {
	return displayMessage;
    }

    public void setDisplayMessage(String displayMessage) {
	this.displayMessage = displayMessage;
    }

    public String getUpc() {
	return upc;
    }

    public void setUpc(String upc) {
	this.upc = upc;
    }

    public String getIRC() {
	return irc;
    }

    public void setIRC(String iRC) {
	irc = iRC;
    }

    public String getTransactionType() {
	return transactionType;
    }

    public void setTransactionType(String transactionType) {
	this.transactionType = transactionType;
    }

    public Date getCreationTs() {
	return creationTs;
    }

    public void setCreationTs(Date creationTs) {
	this.creationTs = creationTs;
    }

    public String getTxnAmountScale() {
	return txnAmountScale;
    }

    public void setTxnAmountScale(String txnAmountScale) {
	this.txnAmountScale = txnAmountScale;
    }

    public String getSpecificationName() {
	return specificationName;
    }

    public void setSpecificationName(String specificationName) {
	this.specificationName = specificationName;
    }

    public Date getUpdateTs() {
	return updateTs;
    }

    public void setUpdateTs(Date updateTs) {
	this.updateTs = updateTs;
    }

    public String getAccountInformation() {
	return accountInformation;
    }

    public void setAccountInformation(String accountInformation) {
	this.accountInformation = accountInformation;
    }

    public String getOneIncNumber() {
	return oneIncNumber;
    }

    public void setOneIncNumber(String oneIncNumber) {
	this.oneIncNumber = oneIncNumber;
    }

    public String getLoyaltyNumber() {
	return loyaltyNumber;
    }

    public void setLoyaltyNumber(String loyaltyNumber) {
	this.loyaltyNumber = loyaltyNumber;
    }

    public Double getBalance() {
	return balance;
    }

    public void setBalance(Double balance) {
	this.balance = balance;
    }

    public Integer getPointBalance() {
	return pointBalance;
    }

    public void setPointBalance(Integer pointBalance) {
	this.pointBalance = pointBalance;
    }

    public String getCardHolderName() {
	return cardHolderName;
    }

    public void setCardHolderName(String cardHolderName) {
	this.cardHolderName = cardHolderName;
    }
    
	public String getPointExpireOn() {
		return pointExpireOn;
	}

	public void setPointExpireOn(String pointExpireOn) {
		this.pointExpireOn = pointExpireOn;
	}

	public List<TxnHistory> getMiniStmt() {

	Connection lConnection = null;
	PreparedStatement lPreparedStatement = null;
	ResultSet lResultSet = null;
	List<TxnHistory> list = new ArrayList<TxnHistory>();
	try {
	    lConnection = DBConnection.getTxnConnection();
	    lPreparedStatement = lConnection.prepareStatement(SELECT_TXN_STR);
	    lPreparedStatement.setString(1, pan);
	    lPreparedStatement.setString(2, "0000");
	    lPreparedStatement.setString(3, "LEG_4");
	    //lPreparedStatement.setMaxRows(5);
	    lResultSet = lPreparedStatement.executeQuery();
	    if (lResultSet != null) {
		while (lResultSet.next()) {
		    TxnHistory txnHistory = new TxnHistory();
		    txnHistory.setAmount(lResultSet.getDouble("txn_amount") + "");
		    txnHistory.setMerchantName(lResultSet.getString("mid"));
		    txnHistory.setDate(Utils.ddMMyyyy.format(lResultSet.getTimestamp("dt_transaction")));
		    list.add(txnHistory);

		}
	    }
	} catch (SQLException _sqlException) {
	    CWLogger.appLog.error("Exception ::", _sqlException);
	} catch (Exception _Exception) {
	    CWLogger.appLog.error("Exception ::", _Exception);
	} finally {
	    DBConnection.closeAll(lResultSet, lPreparedStatement, lConnection);
	}
	return list;
    }

	public Cardholder getCardholder() {
		return cardholder;
	}

	public void setCardholder(Cardholder cardholder) {
		this.cardholder = cardholder;
	}

	public Integer getTxnPoints() {
		return txnPoints;
	}

	public void setTxnPoints(Integer txnPoints) {
		this.txnPoints = txnPoints;
	}

	public String getNewCardNumber() {
		return newCardNumber;
	}

	public void setNewCardNumber(String newCardNumber) {
		this.newCardNumber = newCardNumber;
	}

	public Card getCard() {
		return card;
	}

	public void setCard(Card card) {
		this.card = card;
	}

	public String getPhoneNumber() {
		return phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	
}
